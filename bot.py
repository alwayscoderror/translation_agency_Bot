import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MANAGER_ID = int(os.getenv("MANAGER_ID"))

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –ø–æ —É—Å–ª—É–≥–∞–º –∏ —Ü–µ–Ω–∞–º
SERVICES = {
    "passport": {
        "name": "–ü–∞—Å–ø–æ—Ä—Ç",
        "name_cn": "Êä§ÁÖß",
        "desc": "–ü–µ—Ä–µ–≤–æ–¥ –ø–∞—Å–ø–æ—Ä—Ç–∞ —Å –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã–º –∑–∞–≤–µ—Ä–µ–Ω–∏–µ–º.",
        "desc_cn": "Êä§ÁÖßÁøªËØëÂèäÂÖ¨ËØÅ„ÄÇ",
        "prices": {
            "en": 1200,
            "zh": 1500
        }
    },
    "diploma": {
        "name": "–î–∏–ø–ª–æ–º",
        "name_cn": "ÊØï‰∏öËØÅ‰π¶",
        "desc": "–ü–µ—Ä–µ–≤–æ–¥ –¥–∏–ø–ª–æ–º–∞ —Å –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã–º –∑–∞–≤–µ—Ä–µ–Ω–∏–µ–º.",
        "desc_cn": "ÊØï‰∏öËØÅ‰π¶ÁøªËØëÂèäÂÖ¨ËØÅ„ÄÇ",
        "prices": {
            "en": 2700,
            "zh": 3000
        }
    },
    "attestat": {
        "name": "–ê—Ç—Ç–µ—Å—Ç–∞—Ç",
        "name_cn": "‰∏≠Â≠¶ÊØï‰∏öËØÅ‰π¶",
        "desc": "–ü–µ—Ä–µ–≤–æ–¥ –∞—Ç—Ç–µ—Å—Ç–∞—Ç–∞ —Å –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã–º –∑–∞–≤–µ—Ä–µ–Ω–∏–µ–º.",
        "desc_cn": "‰∏≠Â≠¶ÊØï‰∏öËØÅ‰π¶ÁøªËØëÂèäÂÖ¨ËØÅ„ÄÇ",
        "prices": {
            "en": 1500,
            "zh": 1800
        }
    },
    "driver": {
        "name": "–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ",
        "name_cn": "È©æÈ©∂ËØÅ",
        "desc": "–ü–µ—Ä–µ–≤–æ–¥ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è —Å –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã–º –∑–∞–≤–µ—Ä–µ–Ω–∏–µ–º.",
        "desc_cn": "È©æÈ©∂ËØÅÁøªËØëÂèäÂÖ¨ËØÅ„ÄÇ",
        "prices": {
            "en": 2200,
            "zh": 2500
        }
    },
    "textdoc": {
        "name": "–¢–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (—Ü–µ–Ω–∞ –∑–∞ 1 —Å—Ç—Ä.)",
        "name_cn": "ÊñáÊú¨Êñá‰ª∂Ôºà‰ª∑Ê†ºÊåâÈ°µËÆ°ÁÆóÔºâ",
        "desc": "–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Ü–µ–Ω–∞ –∑–∞ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É).",
        "desc_cn": "ÊñáÊú¨Êñá‰ª∂ÁøªËØë„ÄÇ‰ª∑Ê†ºÊåâÈ°µËÆ°ÁÆó„ÄÇ",
        "prices": {
            "en": 600,
            "zh": 900
        }
    },
    "contract": {
        "name": "–î–æ–≥–æ–≤–æ—Ä + –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ –¥–æ–≥–æ–≤–æ—Ä—É",
        "name_cn": "ÂêàÂêåÂèäÈôÑ‰ª∂",
        "desc": "–ü–µ—Ä–µ–≤–æ–¥ –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        "desc_cn": "ÂêàÂêåÂíåÈôÑ‰ª∂ÁöÑÁøªËØë",
        "prices": {
            "en": 4700,
            "zh": 5000
        }
    },
    "business_license": {
        "name": "–ë–∏–∑–Ω–µ—Å-–ª–∏—Ü–µ–Ω–∑–∏—è",
        "name_cn": "Ëê•‰∏öÊâßÁÖß",
        "desc": "–ü–µ—Ä–µ–≤–æ–¥ –±–∏–∑–Ω–µ—Å-–ª–∏—Ü–µ–Ω–∑–∏–∏ —Å –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã–º –∑–∞–≤–µ—Ä–µ–Ω–∏–µ–º.",
        "desc_cn": "Ëê•‰∏öÊâßÁÖßÁøªËØëÂèäÂÖ¨ËØÅ„ÄÇ",
        "prices": {
            "en": 4200,
            "zh": 4500
        }
    },
    "study_cert": {
        "name": "–°–ø—Ä–∞–≤–∫–∞ –æ–± –æ–±—É—á–µ–Ω–∏–∏",
        "name_cn": "Âú®ËØªËØÅÊòé",
        "desc": "–ü–µ—Ä–µ–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏ –æ–± –æ–±—É—á–µ–Ω–∏–∏.",
        "desc_cn": "Âú®ËØªËØÅÊòéÁøªËØë„ÄÇ",
        "prices": {
            "en": 1500,
            "zh": 1800
        }
    },
    "grade_report": {
        "name": "–¢–∞–±–µ–ª—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏",
        "name_cn": "ÊàêÁª©Âçï",
        "desc": "–ü–µ—Ä–µ–≤–æ–¥ —Ç–∞–±–µ–ª—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏.",
        "desc_cn": "ÊàêÁª©ÂçïÁøªËØë„ÄÇ",
        "prices": {
            "en": 2200,
            "zh": 2500
        }
    },
    "degree_confirm": {
        "name": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –Ω–∞–ª–∏—á–∏–∏ —É—á–µ–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏",
        "name_cn": "Â≠¶‰ΩçËØÅÊòé",
        "desc": "–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ —É—á–µ–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏.",
        "desc_cn": "Â≠¶‰ΩçËØÅÊòéÁøªËØë„ÄÇ",
        "prices": {
            "en": 1500,
            "zh": 1800
        }
    }
}
LANGS = {"en": "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚áÑ –†—É—Å—Å–∫–∏–π üá∑üá∫", "zh": "üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π ‚áÑ –†—É—Å—Å–∫–∏–π üá∑üá∫"}
LANGS_CN = {"en": "Ëã±‰øÑ‰∫íËØë", "zh": "‰∏≠‰øÑ‰∫íËØë"}
LANGS_SHORT = {"en": "üá¨üáß ‚áÑ üá∑üá∫", "zh": "üá®üá≥ ‚áÑ üá∑üá∫"}

# –î–≤—É—è–∑—ã—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏
RU = {
    "main_menu": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç–∞ –ë—é—Ä–æ –ü–µ—Ä–µ–≤–æ–¥–æ–≤!",
    "help": "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –æ–± —É—Å–ª—É–≥–∞—Ö, –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.",
    "services": "–£—Å–ª—É–≥–∏",
    "recent": "–ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ:",
    "contact": "–•–æ—á—É –ø–µ—Ä–µ–≤–æ–¥!",
    "back": "–ù–∞–∑–∞–¥",
    "all_services": "–í—Å–µ —É—Å–ª—É–≥–∏",
    "to_channel": "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª",
    "send_phone": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    "cancel": "–û—Ç–º–µ–Ω–∞",
    "choose_lang": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–æ–≤—É—é –ø–∞—Ä—É:",
    "choose_service": "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É:",
    "price": "–°—Ç–æ–∏–º–æ—Å—Ç—å",
    "days": "–°—Ä–æ–∫: 1‚Äì2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è",
    "min_order": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ ‚Äî 1 —Å—Ç—Ä. (1800 –∑–Ω–∞–∫–æ–≤ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏)",
    "thank_you": "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
    "choose_action": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    "send_phone_info": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.",
}
CN = {
    "main_menu": "‰∏ªËèúÂçï",
    "welcome": "Ê¨¢ËøéÊù•Âà∞ÁøªËØëÂ±ÄÊú∫Âô®‰∫∫ÔºÅ",
    "help": "ÊàëÂèØ‰ª•Â∏ÆÊÇ®‰∫ÜËß£ÊúçÂä°„ÄÅ‰ª∑Ê†ºÔºå‰πüÂèØ‰ª•Êèê‰∫§Áî≥ËØ∑„ÄÇ",
    "services": "ÊúçÂä°",
    "recent": "ÊúÄËøëÊµèËßàÔºö",
    "contact": "ÊàëË¶ÅÁøªËØëÔºÅ",
    "back": "ËøîÂõû",
    "all_services": "ÊâÄÊúâÊúçÂä°",
    "to_channel": "ËøîÂõûÈ¢ëÈÅì",
    "send_phone": "ÂèëÈÄÅÁîµËØùÂè∑Á†Å",
    "cancel": "ÂèñÊ∂à",
    "choose_lang": "ËØ∑ÈÄâÊã©ËØ≠ÁßçÔºö",
    "choose_service": "ËØ∑ÈÄâÊã©ÁøªËØëÊúçÂä°Ôºö",
    "price": "‰ª∑Ê†º",
    "days": "Êó∂ÈïøÔºö1-2‰∏™Â∑•‰ΩúÊó•",
    "min_order": "ÊúÄÂ∞èËÆ¢Âçï ‚Äî 1È°µÔºàÂê´Á©∫Ê†º1800Â≠óÁ¨¶Ôºâ",
    "thank_you": "Ë∞¢Ë∞¢ÔºÅÊÇ®ÁöÑ‰ø°ÊÅØÂ∑≤ÂèëÈÄÅÁªôÁªèÁêÜ„ÄÇÊàë‰ª¨‰ºöÂ∞ΩÂø´‰∏éÊÇ®ËÅîÁ≥ª„ÄÇ",
    "choose_action": "ËØ∑ÈÄâÊã©Êìç‰ΩúÔºö",
    "send_phone_info": "ËØ∑ÁÇπÂáª‰∏ãÊñπÊåâÈíÆÂèëÈÄÅÊÇ®ÁöÑÁîµËØùÂè∑Á†ÅÔºåÊàñÊâãÂä®ËæìÂÖ•„ÄÇ",
}

def get_main_menu(context=None):
    rows = [
        [InlineKeyboardButton(f"üìã {RU['services']} / {CN['services']}", callback_data="services")],
        [InlineKeyboardButton(f"üí¨ {RU['contact']} / {CN['contact']}", callback_data="contact")],
        [InlineKeyboardButton(f"üè† {RU['to_channel']} / {CN['to_channel']}", url="https://t.me/fanyibumen")]
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if context and context.user_data.get("history"):
        rows.append([InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é / Ê∏ÖÈô§ÊµèËßàËÆ∞ÂΩï", callback_data="clear_history")])
    return InlineKeyboardMarkup(rows)

def get_services_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"{SERVICES[svc]['name']} / {SERVICES[svc]['name_cn']}", callback_data=f"svc_{svc}")] for svc in SERVICES] +
        [[InlineKeyboardButton(f"‚Ü©Ô∏è {RU['back']} / {CN['back']}", callback_data="back_main")]]
    )

def get_service_lang_menu(service_key):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"{LANGS[lang]} / {LANGS_CN[lang]}", callback_data=f"svc_{service_key}_lang_{lang}")] for lang in SERVICES[service_key]["prices"]] +
        [[InlineKeyboardButton(f"‚Ü©Ô∏è {RU['back']} / {CN['back']}", callback_data="services")]]
    )

def get_price_menu(service_key, lang):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(f"‚Ü©Ô∏è {RU['back']} / {CN['back']}", callback_data=f"svc_{service_key}"),
            InlineKeyboardButton(f"üìã {RU['all_services']} / {CN['all_services']}", callback_data="services")
        ],
        [InlineKeyboardButton(f"üè† {RU['main_menu']} / {CN['main_menu']}", callback_data="back_main")]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    menu = get_main_menu(context)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history_text = ""
    history = context.user_data.get("history", [])
    if history:
        history_text += f"\n\n<b>{RU['recent']}</b>\n<b>{CN['recent']}</b>"
        for item in history:
            if isinstance(item, tuple) and len(item) == 2:
                svc_key, lang_key = item
                svc = SERVICES[svc_key]
                flag = LANGS_SHORT[lang_key]
                price = svc["prices"][lang_key]
                history_text += (
                    f"\n‚Ä¢ {svc['name']} {svc['name_cn']}Ôºà{flag}ÔºâÔºö<b>{price}‚ÇΩ</b>"
                )
    welcome_text = (
        f"{RU['welcome']}\n{CN['welcome']}\n\n"
        f"{RU['help']}\n{CN['help']}"
        f"{history_text}"
    )
    if update.message:
        await update.message.reply_text(
            welcome_text,
            reply_markup=menu,
            parse_mode="HTML"
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            welcome_text,
            reply_markup=menu,
            parse_mode="HTML"
        )

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    data = query.data
    await query.answer()

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "services":
        await query.edit_message_text(
            f"{RU['choose_service']} / {CN['choose_service']}",
            reply_markup=get_services_menu()
        )
    elif data == "contact":
        await contact(update, context)
    elif data == "back_main":
        await start(update, context)
    elif data == "clear_history":
        context.user_data["history"] = []
        await query.edit_message_text(
            f"{RU['choose_action']}\n{CN['choose_action']}",
            reply_markup=get_main_menu(context)
        )
    # –£—Å–ª—É–≥–∞ –≤—ã–±—Ä–∞–Ω–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —è–∑—ã–∫–æ–≤—ã–µ –ø–∞—Ä—ã
    elif data.startswith("svc_") and "_lang_" not in data:
        svc_key = data[4:]
        if svc_key in SERVICES:
            svc = SERVICES[svc_key]
            await query.edit_message_text(
                f"<b>{svc['name']}</b>\n{svc['desc']}\n\n{svc['desc_cn']}\n\n{RU['choose_lang']} / {CN['choose_lang']}:",
                reply_markup=get_service_lang_menu(svc_key),
                parse_mode="HTML"
            )
        else:
            await query.edit_message_text(
                "–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é –µ—â—ë —Ä–∞–∑.",
                reply_markup=get_services_menu()
            )
    # –Ø–∑—ã–∫–æ–≤–∞—è –ø–∞—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É –∏ —Å—Ä–æ–∫–∏
    elif "_lang_" in data:
        svc_key = data[4:data.rfind("_lang_")]
        lang = data[data.rfind("_lang_") + 6:]
        if svc_key in SERVICES:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é: —Å–æ—Ö—Ä–∞–Ω—è–µ–º (svc_key, lang)
            history = context.user_data.get("history", [])
            pair = (svc_key, lang)
            if pair in history:
                history.remove(pair)
            history.insert(0, pair)
            context.user_data["history"] = history[:3]
            svc = SERVICES[svc_key]
            price = svc["prices"][lang]
            text = (
                f"üìÑ <b>{svc['name']} / {svc['name_cn']}</b>\n{LANGS[lang]} / {LANGS_CN[lang]}\n\n"
                f"{RU['price']} {CN['price']}Ôºö<b>{price} ‚ÇΩ</b>\n"
                f"{RU['days']}\n{CN['days']}"
            )
            await query.edit_message_text(
                text,
                reply_markup=get_price_menu(svc_key, lang),
                parse_mode="HTML"
            )
        else:
            await query.edit_message_text(
                "–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é –µ—â—ë —Ä–∞–∑.",
                reply_markup=get_services_menu()
            )

async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton(f"üì± {RU['send_phone']} / {CN['send_phone']}", request_contact=True)],
        [KeyboardButton(f"‚ùå {RU['cancel']} / {CN['cancel']}")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    info_text = f"{RU['send_phone_info']}\n{CN['send_phone_info']}"
    if update.callback_query:
        await update.callback_query.edit_message_reply_markup(reply_markup=None)
        await update.callback_query.message.reply_text(
            info_text,
            reply_markup=reply_markup
        )
    elif update.message:
        await update.message.reply_text(
            info_text,
            reply_markup=reply_markup
        )

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    user = update.message.from_user
    text = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
        f"–ò–º—è: {user.full_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {contact.phone_number}\n"
        f"Username: @{user.username if user.username else '-'}\n"
        f"User ID: {user.id}"
    )
    await context.bot.send_message(chat_id=MANAGER_ID, text=text)
    # –°–Ω–∞—á–∞–ª–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏ —Å–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await update.message.reply_text(
        f"{RU['thank_you']}\n{CN['thank_you']}",
        reply_markup=ReplyKeyboardRemove()
    )
    # –ó–∞—Ç–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await update.message.reply_text(
        f"{RU['choose_action']}\n{CN['choose_action']}",
        reply_markup=get_main_menu(context)
    )

async def handle_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"{RU['choose_action']}\n{CN['choose_action']}",
        reply_markup=get_main_menu(context)
    )

def main() -> None:
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(menu_handler))
    application.add_handler(CommandHandler("contact", contact))
    application.add_handler(
        MessageHandler(filters.CONTACT, handle_contact)
    )
    application.add_handler(
        MessageHandler(filters.TEXT & filters.Regex(r'^‚ùå'), handle_cancel)
    )
    application.run_polling()

if __name__ == "__main__":
    main() 